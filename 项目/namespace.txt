在一个名字空间里包含一系列的声明以便简单的保证有可能发生的名字冲突是非常有用的。也就是说，名字空间的目的就是保证代码的本地化而不是给用户提供接口。例如：
   #include "cizi.h"
   namespace CIZI{
       int a;
       void f() {}
       int g() {}
   }

既然我们不想让名字CIZI在本文件以外被知道，那么就没有必要创建一个多余的全局名字，并且这个全局名字CIZI有可能会和其他文件的名字发生冲突。在这种情况下，我们可以简单的使得这个名字空间没有名字。
    #include "cizi.h"
    namespace {
      int a;
      void f() {}
      int g() {}
    }

很明显，这里必定有一些方法可以访问这个没有命名的名字空间的成员。因此，没有名字的名字空间可以通过using-directive来访问，也就是说上边这个没有名字的名字空间可以和下边的定义一样。
    namespace $$${
       int a;
       void  f() {}
        int g() {}
    }
   using namespace $$$;
在这里，$$$就是和合这个没有名字的名字空间唯一对应的名字。in particular，没有名字的名字空间，在不同的文件里是不同的。如我们希望的那样，没有任何方法可以访问其他translation unit里边的没有名字的名字空间的成员。



类似：1   、enum { size=100}  就相当于 #define size 100  size是有作用域的

如 int main（）

{

       int i=10;

     {

      enum{ a=10,b=11}

      cout<<a<<endl;     //正确   //输出 10

     }
     cout<<b<<endl;   //错误，超出作用域了，不存在b

}

2、union没有名字

union    //没有类型名（有也行）

{

        int i;

       char c;

};   //没有名字

为匿名联合，联合中的i和c只能有一个同时有效（公用一块内存），可以在作用域直接使用这两个边量。相当于定义了两个变量int i; char c;但这两个变量公用一块内存。他们是有作用域的。和上面的enum类似。